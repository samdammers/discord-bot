AWSTemplateFormatVersion: 2010-09-09
Description: "Pushes logs, metrics and traces from AWS to Datadog."
Transform: AWS::Serverless-2016-10-31

Parameters:
  ClusterName:
    Type: String
  ServiceName:
    Type: String
  CertArn:
    Type: String
  Domain:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  ApiCWLRoleArn:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  
  # IAM Role for API Gateway + CloudWatch Logging
  CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  
  AccessLogs:
    Type: AWS::Logs::LogGroup

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":$context.status,"responseLatency":$context.responseLatency}'
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          ThrottlingBurstLimit: 1
          ThrottlingRateLimit: 1
      FailOnWarnings: True
      Domain:
        DomainName: !Sub "api.${Domain}"
        EndpointConfiguration: REGIONAL
        CertificateArn: !Ref CertArn
        Route53:
          HostedZoneId: !Ref HostedZoneId

  Function:
    Type: AWS::Serverless::Function
    Properties:
      Description: ECS Discord Bot start/stop
      Handler: api.lambda_handler
      MemorySize: 128
      Runtime: python3.12
      Timeout: 15
      CodeUri: ../handler.zip
      Environment:
        Variables:
          CLUSTER_NAME: !Ref ClusterName
          SERVICE_NAME: !Ref ServiceName
      Events:
        CheckLogGroupsScheduledEvent:
          Type: Schedule
          Properties:
            Description: Event rule to reset permissions every day (1am AEST)
            Schedule: 'cron(0 15 * * ? *)'
            Enabled: True
        StartService: # warning: creates a public endpoint
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Method: GET
            Path: /discord-bot/start
            TimeoutInMillis: 15000
        StopService: # warning: creates a public endpoint
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Method: GET
            Path: /discord-bot/stop
            TimeoutInMillis: 15000
        RestartService: # warning: creates a public endpoint
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Method: GET
            Path: /discord-bot/restart
            TimeoutInMillis: 15000
      Role: !GetAtt Role.Arn

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: ECS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:Describe*"
                  - "ecs:List*"
                  - "ecs:UpdateService"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
